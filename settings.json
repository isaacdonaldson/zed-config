// Zed settings
//
// For information on how to configure Zed, see the Zed
// documentation: https://zed.dev/docs/configuring-zed
//
// To see all of Zed's default settings without changing your
// custom settings, run the `open default settings` command
// from the command palette or from `Zed` application menu.
{
  // Hide profile picture in titlebar
  "features": {
    // // WORK:
    // "edit_prediction_provider": "none"
    "edit_prediction_provider": "copilot"
  },
  "icon_theme": "Warm Charmed Icons",
  "show_user_picture": false,
  // Assistant panel (AI)
  "agent": {
    // // WORK:
    // "enabled": false,
    // "version": "2"
    "always_allow_tool_actions": true,
    "default_profile": "minimal",
    "dock": "right",
    "default_model": {
      "provider": "copilot_chat",
      "model": "claude-3-7-sonnet"
    },
    "version": "2"
  },
  // Chat panel
  "chat_panel": {
    // Hide the chat panel
    "button": "never",
    "dock": "left"
  },
  // Collaboration panel
  "collaboration_panel": {
    // Hide the collaboration panel
    "button": false,
    "dock": "left"
  },
  // Notification panel
  "notification_panel": {
    // Hide the collaboration panel
    "button": false,
    "dock": "left"
  },
  // Show branch in title bar
  "title_bar": {
    "show_branch_icon": true,
    "show_sign_in": false,
    "show_user_picture": false,
    "show_project_items": true,
    "show_branch_name": true,
    "show_onboarding_banner": false
  },
  // Hide some UI elements
  "search": {
    "button": false
  },
  "diagnostics": {
    "button": true,
    "include_warnings": true,
    "cargo": {
      "show_in_status_bar": true,
      "show_in_panel": true
    }
  },
  "inline_code_actions": false,
  // Make the line numbers relative to the cursor
  "relative_line_numbers": true,
  // Gutter where line numbers and git status is
  "gutter": {
    "code_actions": true,
    "runnables": true,
    "line_numbers": true,
    "folds": true
  },
  // File finder modal
  "file_finder": {
    "file_icons": true,
    "modal_max_width": "xlarge"
  },
  // Show first window draw time and FPS
  "performance": {
    "show_in_status_bar": false
  },
  // Vim emulation mode
  "vim_mode": true,
  "vim": {
    "use_system_clipboard": "always",
    "cursor_shape": {
      "normal": "block",
      "insert": "bar",
      "replace": "hollow",
      "visual": "block"
    }
  },
  // Cursor stays solid
  "cursor_blink": false,
  // Hide scrollbar
  "scrollbar": {
    "show": "auto"
  },
  "minimap": {
    "show": "always"
  },
  // Behaviours of the active panel
  "active_pane_modifiers": {
    "inactive_opacity": 0.75,
    "border_size": 1
  },
  // Whether or not AI suggestions are shown
  "show_edit_predictions": true,
  // Editor theme: Myricle is custom
  "theme": "Colorizer Pro",
  // Show indent guides
  "indent_guides": {
    "enabled": true,
    "line_width": 2,
    "active_line_width": 3,
    "coloring": "indent_aware",
    "background_coloring": "disabled"
  },
  "inlay_hints": {
    "enabled": false
  },
  // Line wrapping
  "preferred_line_length": 120,
  "soft_wrap": "preferred_line_length",
  // Telemetry
  "telemetry": {
    "diagnostics": false,
    "metrics": false
  },
  // Fonts
  "ui_font_size": 12,
  "ui_font_weight": 700,
  "ui_font_family": "TX-02",
  "ui_font_fallbacks": ["Berkeley Mono Variable", "Berkeley Mono", "JetBrains Mono NL"],
  "buffer_font_size": 12,
  "buffer_font_weight": 500,
  "buffer_font_family": "TX-02",
  "buffer_font_fallbacks": ["Berkeley Mono Variable", "Berkeley Mono", "JetBrains Mono NL"],
  "buffer_font_features": {
    "calt": false,
    "liga": false,
    "dlig": false,
    "ss02": true,
    "zero": true
  },
  "buffer_line_height": {
    "custom": 1.3
  },
  // File Tree
  "project_panel": {
    "dock": "left",
    "indent_size": 15,
    "entry_spacing": "comfortable",
    "auto_reveal_entries": true,
    "show_diagnostics": "all",
    "git_status": true,
    "auto_fold_dirs": false
  },
  // Terminal
  "terminal": {
    "vim_mode": true,
    "dock": "bottom",
    "font_size": 12,
    "font_weight": 600,
    "font_family": "TX-02",
    "font_fallbacks": ["Berkeley Mono Variable", "Berkeley Mono", "JetBrains Mono NL"],
    "line_height": "standard",
    "option_as_meta": true,
    "working_directory": "current_project_directory",
    "toolbar": {
      "title": false
    }
  },
  // Git Blame
  "git": {
    "inline_blame": {
      "enabled": true,
      "delay_ms": 500
    }
  },
  // Tabs
  "tab_bar": {
    "show_nav_history_buttons": false,
    "show_tab_bar_buttons": false
  },
  "toolbar": {
    "quick_actions": false
  },
  "tabs": {
    "git_status": true,
    "show_close_button": "always",
    "activate_on_close": "left_neighbour",
    "close_position": "right",
    "file_icons": true
  },
  "preview_tabs": {
    "enabled": true,
    "enable_preview_from_file_finder": false,
    "enable_preview_from_code_navigation": false
  },
  // Make new lines under a comment not start with a comment
  "extend_comment_on_newline": false,
  // Formatting
  "format_on_save": "on",
  // Autoclose brackets and quotations when typing a single one
  "use_autoclose": false,
  // Language Overrides
  "languages": {
    // // WORK:
    // "Lua": {
    //   "show_edit_predictions": true,
    //   "tab_size": 2
    // },
    // "Markdown": {
    //   "show_edit_predictions": false
    // },
    // "TOML": {
    //   "format_on_save": "on"
    // },
    // "YAML": {
    //   "format_on_save": "off"
    // }
    "TypeScript": {
      "format_on_save": "off",
      "show_edit_predictions": true
    },
    "Zig": {
      "show_edit_predictions": true
    },
    "Go": {
      "show_edit_predictions": true
    },
    "HTML": {
      "format_on_save": "off"
    },
    "CSS": {
      "show_edit_predictions": true,
      "format_on_save": "on",
      "tab_size": 2
    },
    "SCSS": {
      "format_on_save": "on",
      "tab_size": 2
    },
    "Ruby": {
      "format_on_save": "on",
      "show_edit_predictions": true,
      "tab_size": 2,
      "language_servers": ["!solargraph", "!rubocop", "ruby-lsp"]
    },
    "JavaScript": {
      "format_on_save": "off",
      "show_edit_predictions": true
    },
    "Lua": {
      "show_edit_predictions": true,
      "tab_size": 2
    },
    "Markdown": {
      "show_edit_predictions": false
    },
    "TOML": {
      "format_on_save": "on"
    },
    "YAML": {
      "format_on_save": "off"
    }
  },
  // LSP
  "lsp": {
    // // WORK:
    // "rust-analyzer": {...}
    "solargraph": {
      "initialization_options": {
        "diagnostics": true,
        "formatting": true
      }
    },
    "ruby-lsp": {
      "settings": {
        "use_bundler": true
      },
      "initialization_options": {
        "enabledFeatures": {
          // This disables diagnostics
          "diagnostics": false
        }
      }
    },
    "rubocop": {
      "initialization_options": {
        "safeAutocorrect": true
      }
    },
    "rust-analyzer": {
      "initialization_options": {
        "imports": {
          "granularity": {
            "group": "module"
          }
        },
        "inlayHints": {
          "enable": "skip_trivial",
          "lifetimeElisionHints": {
            "enable": "skip_trivial",
            "useParameterNames": true
          },
          "closureReturnTypeHints": {
            "enable": "always"
          }
        },

        // get more cargo-less diagnostics from rust-analyzer,
        // which might include false-positives (those can be turned off by their names)
        "diagnostics": {
          "experimental": {
            "enable": true
          }
        },
        // To disable the checking entirely
        // (ignores all cargo and check settings below)
        "checkOnSave": true,
        // To check the `lib` target only.
        "cargo": {
          "allTargets": false
        },
        // Use `-p` instead of `--workspace` for cargo check
        "check": {
          "workspace": true
        },
        // Snippets
        "completion": {
          "snippets": {
            "custom": {
              "Arc::new": {
                "postfix": "arc",
                "body": ["Arc::new(${receiver})"],
                "requires": "std::sync::Arc",
                "scope": "expr"
              },
              "Some": {
                "postfix": "some",
                "body": ["Some(${receiver})"],
                "scope": "expr"
              },
              "Ok": {
                "postfix": "ok",
                "body": ["Ok(${receiver})"],
                "scope": "expr"
              },
              "vec!": {
                "postfix": "vec",
                "body": ["vec![${receiver}]"],
                "description": "vec![]",
                "scope": "expr"
              }
            }
          }
        }
      }
    }
  },
  "file_types": {
    // // Work: {}
    "HTML": ["*.leaf"]
  }
}
